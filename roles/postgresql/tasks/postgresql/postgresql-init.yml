- name: check create {{ postgresql_data }}
  stat:
    path: "{{ postgresql_data }}"
  register: check_postgresql_data_dir
  changed_when: false
  tags:
    - postgresql::init

- name: create folder postgresql data
  file:
    path: "{{ postgresql_data }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  tags:
    - postgresql::init

# Init for Debian
- block:
    - name: ensure a locale exists
      locale_gen:
        name: "{{ postgresql_locale }}"
        state: present

    - name: initdb postgresql {{ postgresql_version }}
      command: "/usr/bin/pg_createcluster -d {{ postgresql_data }} -s {{ postgresql_unix_socket_dir }} -l {{ postgresql_log }} -p {{ postgresql_port }} --locale {{ postgresql_locale }} {{ postgresql_version }} main"
      args:
        chdir: "{{ postgresql_data }}/"
        creates: PG_VERSION

    - name: configure global postgresql.conf settings
      lineinfile:
        dest: "{{ postgresql_conf }}/postgresql.conf"
        regexp: "^#?{{ item.option }}.+$"
        line: "{{ item.option }} = '{{ item.value }}'"
        state: "{{ item.state | default('present') }}"
        mode: 0644
      with_items: "{{ __postgresql_global_conf }}"
      notify: restart postgresql
  when:
    - ansible_os_family == "Debian"
    - check_postgresql_data_dir.stat.exists == false
  tags:
    - postgresql::init

- block:
    - name: stop service PostgreSQL {{ postgresql_version }}
      systemd:
        name: "{{ postgresql_service }}"
        state: stopped
        enabled: no
        daemon_reload: yes

    - name: initdb postgresql {{ postgresql_version }}
      become: true
      become_user: postgres
      command: "{{ postgresql_bin }}/initdb -D {{ postgresql_data }} --locale {{ postgresql_locale }} -k"
      args:
        chdir: "{{ postgresql_data }}/"
        creates: PG_VERSION

    - name: configure global postgresql.conf settings
      lineinfile:
        dest: "{{ postgresql_conf }}/postgresql.conf"
        regexp: "^#?{{ item.option }}.+$"
        line: "{{ item.option }} = '{{ item.value }}'"
        state: "{{ item.state | default('present') }}"
        mode: 0644
      with_items: "{{ __postgresql_global_conf }}"
      notify: restart postgresql
  when:
    - ansible_os_family == "RedHat"
    - check_postgresql_data_dir.stat.exists == false
  tags:
    - postgresql::init
